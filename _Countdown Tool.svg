<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 27.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" baseProfile="basic" id="Layer_1"
	 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 1200 900"
	 xml:space="preserve">



<style type="text/css">

/* can I address font imports with JS? */

@import url('https://fonts.googleapis.com/css?family=Permanent Marker:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900,900italic');
@import url('https://fonts.googleapis.com/css?family=Bebas Neue:400,100,100italic,300,300italic,400italic,500,500italic,700,700italic,900,900italic');


/* have also used rects at full view */

svg {fill:none; stroke: black;}



/* play pause shapes */

.controlButton {fill:black;}

.controlButtonIcon {fill: white;}



/* hover can't be set on g tag */

#centerDisplay:hover {fill:red;} 


/* main countdown display */

.mainText {font-size: 440px; fill: white; font-family: 'Permanent Marker'; dominant-baseline: middle; text-anchor: middle;}

#centerBG {fill: black;}



.barNumber {font-size: 80px; fill: black; font-family: 'Bebas Neue';}

.timeBarRect {stroke-width: 4;}





/* --- STATES --- */

.hidden {visibility: hidden;}

.blink {animation: blinkAni 1.5s linear infinite;}




/* --- ANIMATIONS --- */

    @keyframes blinkAni{
        
        0%{
            opacity: 0;
        }
        50%{
            opacity: 0.7;
        }
        100%{
            opacity: 0;
        }
    }

/* --- TESTING TOOLS --- */
.button {fill:black;}


</style>


<rect id="border" x="0" y="0" height="100%" width="100%" />



<g id="centerDisplay" transform="translate(260, 20)" class="">

	<circle id="centerBG" transform="translate(340, 340)" r="340" />

	<text id="mainNumberDisplay" transform="translate(350, 375)" class="mainText">##</text>

</g>


<g id="timeBar" transform="translate(100, 750)">

	<rect id="timeBarRect" height="80" width="1000" />
	
	<g id="timeBarNumbers" transform="translate(0, 65)">
		<text id="timeBar10" transform="translate(50, 0)" class="barNumber">10</text>
		<text id="timeBar20" transform="translate(150, 0)" class="barNumber">20</text>
		<text id="timeBar30" transform="translate(250, 0)" class="barNumber">30</text>
		<text id="timeBar40" transform="translate(350, 0)" class="barNumber">40</text>
		<text id="timeBar50" transform="translate(450, 0)" class="barNumber">50</text>
		<text id="timeBar60" transform="translate(550, 0)" class="barNumber">60</text>
		<text id="timeBar70" transform="translate(650, 0)" class="barNumber">70</text>
		<text id="timeBar80" transform="translate(750, 0)" class="barNumber">80</text>
		<text id="timeBar90" transform="translate(850, 0)" class="barNumber">90</text>
	</g>

</g>



<g id="controlDisplay" transform="translate(950, 40)">


    <g id="playDisplay">
        
		<path id="playBG" class="controlButton" d="M185,0h-85v80h85c8.29,0,15-6.72,15-15V15C200,6.72,193.28,0,185,0z"/>
        
		<polygon id="playIcon" class="controlButtonIcon" points="183.5,40 116.5,73.5 116.5,6.5"/>
        
    </g>

    <g id="pauseDisplay">
        
		<path id="pauseBG" class="controlButton" d="M185,0h-85v80h85c8.29,0,15-6.72,15-15V15C200,6.72,193.28,0,185,0z"/>
              
		<path id="pauseIcon" class="controlButtonIcon" d="M145,73.5h-19v-67h19V73.5z M174,6.5h-19v67h19V6.5z"/>
    </g>


    <g id="restartDisplay">

		<path id="restartBG" class="controlButton" d="M15,0C6.72,0,0,6.72,0,15V65c0,8.29,6.72,15,15,15h85V0H15z"/>
           
	    <polygon id="restartIcon" class="controlButtonIcon" points="63.75,20.5 63.75,6.5 35.5,26.53 35.5,6.5 16.5,6.5 16.5,73.5 35.5,73.5 35.5,53.47 63.75,73.5 63.75,59.5 83.5,73.5 83.5,6.5"/>

	</g>

</g>


/* --- TESTING TOOLS --- */

<circle id="but1" class="button" transform="translate(50, 50)"  r="10" />
<circle id="but2" class="button" transform="translate(75, 50)"  r="10" />
<circle id="but3" class="button" transform="translate(100, 50)"  r="10" />



<script type="text/javascript">//<![CDATA[


        
        const clockCtrl = {
                      
            count: '',
            
            ticDown: function() {
                this.count -= 1;
            },

            reset: function() {
                this.count = 19;
                console.log(this.count);
            }

        };

        

        const domCtrl = {
            
            play: function() {
                console.log('play test in dom domCtrl')
                playPauseDOM.playing();
                
            },

            pause: function() {
                console.log('pause test in domCtrl')
                playPauseDOM.paused();
                        
        
            },

            timeOut: function() {

            },

            reset: function() {
                console.log('reset test')
                numberDOM.renderCount(clockCtrl.count);
            }

        };




        const playPauseDOM = {
            
            playBut: document.getElementById("playDisplay"),
            pauseBut: document.getElementById("pauseDisplay"),
            restartBut: document.getElementById("restartDisplay"),

            isPause: true,

            playing: function() {
                this.pauseBut.classList.remove('hidden');
                this.playBut.classList.add('hidden');
                this.isPaused = false;
            },

            paused: function() {
                this.pauseBut.classList.add('hidden');
                this.playBut.classList.remove('hidden');
                this.isPaused = true;
            },

        };



        const numberDOM = {

            
            
            numberCount: document.getElementById("mainNumberDisplay"),

            renderCount: function(count) {
               this.numberCount.innerHTML = count;
            },

            blink: function() {
                this.numberCount.classList.add('blink');
            }

        };


        
        


        function Timer(fn, t) {

            var timerObj = setInterval(fn, t);

            this.pause = function() {
                if (timerObj) {
                    clearInterval(timerObj);
                    timerObj = null;
                }

                domCtrl.pause();
                return this;
                
            }

            // start timer using current settings (if it's not already running)
            this.start = function() {
                if (!timerObj) {
                    this.pause();
                    timerObj = setInterval(fn, t);
                    domCtrl.play();
                }
                return this;
            }

            // start with new or original interval,.pause current interval
            this.reset = function() {
                
                clockCtrl.reset();
                domCtrl.reset();
                
                return this;
            
                
            }
        }   



        
        var timer = new Timer(function() {

            /* incremented elements are in this function, but do they have to be? */
            
            clockCtrl.ticDown();
            
            numberDOM.renderCount(clockCtrl.count);      

            
            console.log(clockCtrl.count);     
            

        }, 1000);
        
        timer.reset().pause();
        domCtrl.pause();





        
        /* --- TESTING TOOLS --- */
        
        /* gets dom elements */
        const but1 = document.getElementById("but1");
        const but2 = document.getElementById("but2");
        const but3 = document.getElementById("but3");

        /* event listener assignemtns to buttons elements */
        but1.addEventListener("click", function() {timer.pause().reset();});
        but2.addEventListener("click", function() {timer.pause();});
        but3.addEventListener("click", function() {timer.start();});







//]]></script>



</svg>
